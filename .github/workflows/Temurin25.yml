name: Temurin 25 Integrity Reproduction

on:
  workflow_dispatch:
    inputs:
      enable-cache-roundtrip:
        description: "Also perform a cache save/restore cycle of the mutated JDK (NOT recommended in real builds)"
        required: false
        default: "false"

jobs:
  repro:
    name: Reproduce integrity issue (Temurin 25) on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - ubuntu-22.04-arm
          - macos-latest
          - macos-13
          - windows-latest
          # Add additional runners (e.g. self-hosted labels) if desired
    env:
      REQUESTED_MAJOR: "25"
      FALLBACK_EA: "25-ea"
      # Toggle mutation of jrt-fs.jar as well (usually ct.sym is enough)
      MUTATE_JRT_FS: "false"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Temurin 25 GA availability
        id: detect
        shell: bash
        run: |
          set -e
          echo "Checking GA availability for Temurin ${REQUESTED_MAJOR}"
          GA_JSON="$(curl -s "https://api.adoptium.net/v3/info/release_versions?release_type=ga&version=${REQUESTED_MAJOR}")"
          if echo "${GA_JSON}" | grep -q '"available":[[:space:]]*\[\s*\]'; then
            echo "ga_available=false" >> "$GITHUB_OUTPUT"
            echo "Temurin ${REQUESTED_MAJOR} GA not yet listed â€“ will fall back to ${FALLBACK_EA}"
          else
            echo "ga_available=true" >> "$GITHUB_OUTPUT"
            echo "Temurin ${REQUESTED_MAJOR} GA appears available."
          fi

      - name: Setup Java (Temurin 25 or EA fallback)
        id: setup-java
        uses: actions/setup-java@v5
        with:
            distribution: temurin
            java-version: ${{ steps.detect.outputs.ga_available == 'true' && env.REQUESTED_MAJOR || env.FALLBACK_EA }}
            check-latest: true
            cache: gradle

      - name: Show Java version & JAVA_HOME
        run: |
          echo "Reported java -version:"
          java -version
          echo "JAVA_HOME=$JAVA_HOME"
          echo "Listing critical files (if they exist):"
          ls -l "$JAVA_HOME/lib/ct.sym" 2>/dev/null || true
          ls -l "$JAVA_HOME/lib/jrt-fs.jar" 2>/dev/null || true

      - name: Record baseline hashes (bash)
        if: runner.os != 'Windows'
        run: |
          set -e
          echo "Baseline hashes:"
          if [ -f "$JAVA_HOME/lib/ct.sym" ]; then
            sha512sum "$JAVA_HOME/lib/ct.sym" | tee ct.sym.baseline.sha
          else
            echo "ct.sym missing"
          fi
          if [ -f "$JAVA_HOME/lib/jrt-fs.jar" ]; then
            sha512sum "$JAVA_HOME/lib/jrt-fs.jar" | tee jrt-fs.jar.baseline.sha
          fi

      - name: Record baseline hashes (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $ct = Join-Path $env:JAVA_HOME 'lib\ct.sym'
          $jrt = Join-Path $env:JAVA_HOME 'lib\jrt-fs.jar'
          if (Test-Path $ct) { Get-FileHash $ct -Algorithm SHA512 | Tee-Object ct.sym.baseline.txt }
          if (Test-Path $jrt) { Get-FileHash $jrt -Algorithm SHA512 | Tee-Object jrt-fs.jar.baseline.txt }

      # --- Mutation Phase (Linux/macOS) ---
      - name: Mutate ct.sym (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -e
          CT="$JAVA_HOME/lib/ct.sym"
          if [ ! -f "$CT" ]; then
            echo "ct.sym not found; skipping mutation."
            exit 0
          fi
          echo "Original ct.sym SHA512:"
          sha512sum "$CT"
          TMPDIR=$(mktemp -d)
          pushd "$TMPDIR" > /dev/null
          unzip -qq "$CT"
          # Touch all entries to force different timestamps (ZIP central directory changes)
          find . -type f -exec touch -t 202401010101 {} \;
          zip -q -X -r mutated.sym .
          popd > /dev/null
          cp "$CT" "${CT}.bak"
          cp "$TMPDIR/mutated.sym" "$CT"
          echo "Mutated ct.sym SHA512 (should differ):"
          sha512sum "$CT"
          if [ "${MUTATE_JRT_FS}" = "true" ] && [ -f "$JAVA_HOME/lib/jrt-fs.jar" ]; then
            echo "Mutating jrt-fs.jar similarly"
            JRT="$JAVA_HOME/lib/jrt-fs.jar"
            TMP2=$(mktemp -d)
            pushd "$TMP2" > /dev/null
            unzip -qq "$JRT"
            find . -type f -exec touch -t 202401010101 {} \;
            zip -q -X -r mutated.jar .
            popd > /dev/null
            cp "$JRT" "${JRT}.bak"
            cp "$TMP2/mutated.jar" "$JRT"
            echo "New jrt-fs.jar hash:"
            sha512sum "$JRT"
            rm -rf "$TMP2"
          fi
          rm -rf "$TMPDIR"

      # --- Mutation Phase (Windows) ---
      - name: Mutate ct.sym (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ct = Join-Path $env:JAVA_HOME 'lib\ct.sym'
          if (-not (Test-Path $ct)) {
            Write-Host "ct.sym not found; skipping mutation."
            exit 0
          }
          Write-Host "Original ct.sym hash:"
          Get-FileHash $ct -Algorithm SHA512
          $tmp = New-Item -ItemType Directory -Path (Join-Path $env:TEMP ([System.Guid]::NewGuid().ToString()))
          Expand-Archive -Path $ct -DestinationPath $tmp -Force
          # Touch file LastWriteTime to a fixed past date to alter resultant zip ordering
          Get-ChildItem -Path $tmp -Recurse | ForEach-Object { $_.LastWriteTime = Get-Date "2024-01-01T01:01:00Z" }
          $mutated = Join-Path $tmp 'mutated.sym'
          if (Test-Path $mutated) { Remove-Item $mutated -Force }
          Compress-Archive -Path (Join-Path $tmp '*') -DestinationPath $mutated -CompressionLevel Optimal
          Copy-Item $ct "$($ct).bak"
          Copy-Item $mutated $ct -Force
          Write-Host "Mutated ct.sym hash:"
          Get-FileHash $ct -Algorithm SHA512
          if ($env:MUTATE_JRT_FS -eq 'true') {
            $jrt = Join-Path $env:JAVA_HOME 'lib\jrt-fs.jar'
            if (Test-Path $jrt) {
              Write-Host "Mutating jrt-fs.jar"
              $tmp2 = New-Item -ItemType Directory -Path (Join-Path $env:TEMP ([System.Guid]::NewGuid().ToString()))
              Expand-Archive -Path $jrt -DestinationPath $tmp2 -Force
              Get-ChildItem -Path $tmp2 -Recurse | ForEach-Object { $_.LastWriteTime = Get-Date "2024-01-01T01:01:00Z" }
              $mut2 = Join-Path $tmp2 'mutated.jar'
              Compress-Archive -Path (Join-Path $tmp2 '*') -DestinationPath $mut2 -CompressionLevel Optimal
              Copy-Item $jrt "$($jrt).bak"
              Copy-Item $mut2 $jrt -Force
              Write-Host "Mutated jrt-fs.jar hash:"
              Get-FileHash $jrt -Algorithm SHA512
            }
          }

      - name: Run jlink (expect integrity failure)
        id: jlink-run
        shell: bash
        run: |
          set +e
          echo "Invoking jlink after mutation..."
          jlink --add-modules java.base --output minimal-runtime 2> jlink.err
          status=$?
          echo "Exit code: $status"
          echo "----- jlink stderr -----"
          cat jlink.err || true
          echo "------------------------"
          # Expect non-zero on Linux/Windows Temurin 25 if integrity enforced
          if [ "$status" -ne 0 ]; then
            echo "JLINK_RESULT=failed" >> "$GITHUB_OUTPUT"
            exit 0
          else
            echo "JLINK_RESULT=passed" >> "$GITHUB_OUTPUT"
            exit 0
          fi

      - name: Force failure on macOS if integrity silently passed
        if: runner.os == 'macOS' && steps.jlink-run.outputs.JLINK_RESULT == 'passed'
        run: |
          echo "macOS jlink passed (expected due to platform leniency). Forcing failure to highlight reproduction."
          exit 1

      # -------- Optional Cache Round Trip (disabled by default) --------
      - name: Decide if cache round trip enabled
        id: cache-flag
        run: |
          if [ "${{ github.event.inputs.enable-cache-roundtrip }}" = "true" ]; then
            echo "do_cache=true" >> "$GITHUB_OUTPUT"
          else
            echo "do_cache=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Save mutated JDK to cache (NOT FOR REAL USE)
        if: steps.cache-flag.outputs.do_cache == 'true'
        id: cache-save
        uses: actions/cache@v4
        with:
          # Cache the mutated JAVA_HOME (dangerous; demonstration only)
          path: ${{ env.JAVA_HOME }}
          key: temurin25-mutated-${{ runner.os }}-${{ runner.arch }}-v1

      - name: Restore mutated JDK immediately (simulate second run)
        if: steps.cache-flag.outputs.do_cache == 'true'
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.JAVA_HOME }}
          key: temurin25-mutated-${{ runner.os }}-${{ runner.arch }}-v1

      - name: Second jlink after cache restore (expect failure again)
        if: steps.cache-flag.outputs.do_cache == 'true'
        run: |
          set +e
          echo "Re-running jlink after cache restore..."
          jlink --add-modules java.base --output minimal-runtime-2 2> jlink2.err
          rc=$?
          cat jlink2.err || true
          echo "Second jlink exit code: $rc"
          # Do not force failure here; earlier step already recorded primary reproduction.

      - name: Summary
        run: |
          echo "Runner OS: ${{ runner.os }}"
          echo "Java version spec used: ${{ steps.detect.outputs.ga_available == 'true' && env.REQUESTED_MAJOR || env.FALLBACK_EA }}"
          echo "jlink primary result: ${{ steps.jlink-run.outputs.JLINK_RESULT }}"
          echo "Cache round trip enabled: ${{ github.event.inputs.enable-cache-roundtrip }}"
